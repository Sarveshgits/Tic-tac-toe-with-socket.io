{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nconst initialBoard = () => Array(9).fill(null);\nconst useTictacToe = () => {\n  _s();\n  const [board, setBoard] = useState(initialBoard());\n  const [isXNext, setIsXNext] = useState(true);\n  const WINNING_PATTERNS = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  const calculateWinner = currentBoard => {\n    for (let i = 0; i < WINNING_PATTERNS.length; i++) {\n      const [a, b, c] = WINNING_PATTERNS[i];\n      if (currentBoard[a] && currentBoard[a] === currentBoard[b] && currentBoard[a] === currentBoard[c]) {\n        return currentBoard[a];\n      }\n    }\n    return null;\n  };\n  const handleClick = index => {\n    // check winner\n    const winner = calculateWinner(board);\n    if (winner || board[index]) return;\n    const newBoard = [...board];\n    newBoard[index] = isXNext ? \"X\" : \"O\";\n    setBoard(newBoard);\n    setIsXNext(!isXNext);\n  };\n  const getStatusMessage = () => {\n    const winner = calculateWinner(board);\n    if (winner) return \"Player \".concat(winner, \" wins!\");\n    if (!board.includes(null)) return \"It's a draw!\";\n    return \"Player \".concat(isXNext ? \"X\" : \"O\", \" turn\");\n  };\n  const resetGame = () => {\n    setBoard(initialBoard());\n    setIsXNext(true);\n  };\n  return {\n    board,\n    handleClick,\n    calculateWinner,\n    getStatusMessage,\n    resetGame\n  };\n};\n_s(useTictacToe, \"o3UXJtYhCmFl0eSkKYTfPXzX4sU=\");\nexport default useTictacToe;","map":{"version":3,"names":["useState","initialBoard","Array","fill","useTictacToe","_s","board","setBoard","isXNext","setIsXNext","WINNING_PATTERNS","calculateWinner","currentBoard","i","length","a","b","c","handleClick","index","winner","newBoard","getStatusMessage","concat","includes","resetGame"],"sources":["E:/WebDev/FrontEnd/React/client/src/hooks/use-tic-tac-toe.jsx"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nconst initialBoard = () => Array(9).fill(null);\r\n\r\nconst useTictacToe = () => {\r\n  const [board, setBoard] = useState(initialBoard());\r\n  const [isXNext, setIsXNext] = useState(true);\r\n\r\n  const WINNING_PATTERNS = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n\r\n  const calculateWinner = (currentBoard) => {\r\n    for (let i = 0; i < WINNING_PATTERNS.length; i++) {\r\n      const [a, b, c] = WINNING_PATTERNS[i];\r\n      if (\r\n        currentBoard[a] &&\r\n        currentBoard[a] === currentBoard[b] &&\r\n        currentBoard[a] === currentBoard[c]\r\n      ) {\r\n        return currentBoard[a];\r\n      }\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  const handleClick = (index) => {\r\n    // check winner\r\n    const winner = calculateWinner(board);\r\n    if (winner || board[index]) return;\r\n\r\n    const newBoard = [...board];\r\n    newBoard[index] = isXNext ? \"X\" : \"O\";\r\n    setBoard(newBoard);\r\n    setIsXNext(!isXNext);\r\n  };\r\n\r\n  const getStatusMessage = () => {\r\n    const winner = calculateWinner(board);\r\n    if (winner) return `Player ${winner} wins!`;\r\n    if (!board.includes(null)) return `It's a draw!`;\r\n    return `Player ${isXNext ? \"X\" : \"O\"} turn`;\r\n  };\r\n\r\n  const resetGame = () => {\r\n    setBoard(initialBoard());\r\n    setIsXNext(true);\r\n  };\r\n\r\n  return { board, handleClick, calculateWinner, getStatusMessage, resetGame };\r\n};\r\n\r\nexport default useTictacToe;\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,MAAMC,YAAY,GAAGA,CAAA,KAAMC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;AAE9C,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAACC,YAAY,CAAC,CAAC,CAAC;EAClD,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAMU,gBAAgB,GAAG,CACvB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CACV;EAED,MAAMC,eAAe,GAAIC,YAAY,IAAK;IACxC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,gBAAgB,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;MAChD,MAAM,CAACE,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAGP,gBAAgB,CAACG,CAAC,CAAC;MACrC,IACED,YAAY,CAACG,CAAC,CAAC,IACfH,YAAY,CAACG,CAAC,CAAC,KAAKH,YAAY,CAACI,CAAC,CAAC,IACnCJ,YAAY,CAACG,CAAC,CAAC,KAAKH,YAAY,CAACK,CAAC,CAAC,EACnC;QACA,OAAOL,YAAY,CAACG,CAAC,CAAC;MACxB;IACF;IAEA,OAAO,IAAI;EACb,CAAC;EAED,MAAMG,WAAW,GAAIC,KAAK,IAAK;IAC7B;IACA,MAAMC,MAAM,GAAGT,eAAe,CAACL,KAAK,CAAC;IACrC,IAAIc,MAAM,IAAId,KAAK,CAACa,KAAK,CAAC,EAAE;IAE5B,MAAME,QAAQ,GAAG,CAAC,GAAGf,KAAK,CAAC;IAC3Be,QAAQ,CAACF,KAAK,CAAC,GAAGX,OAAO,GAAG,GAAG,GAAG,GAAG;IACrCD,QAAQ,CAACc,QAAQ,CAAC;IAClBZ,UAAU,CAAC,CAACD,OAAO,CAAC;EACtB,CAAC;EAED,MAAMc,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,MAAMF,MAAM,GAAGT,eAAe,CAACL,KAAK,CAAC;IACrC,IAAIc,MAAM,EAAE,iBAAAG,MAAA,CAAiBH,MAAM;IACnC,IAAI,CAACd,KAAK,CAACkB,QAAQ,CAAC,IAAI,CAAC,EAAE;IAC3B,iBAAAD,MAAA,CAAiBf,OAAO,GAAG,GAAG,GAAG,GAAG;EACtC,CAAC;EAED,MAAMiB,SAAS,GAAGA,CAAA,KAAM;IACtBlB,QAAQ,CAACN,YAAY,CAAC,CAAC,CAAC;IACxBQ,UAAU,CAAC,IAAI,CAAC;EAClB,CAAC;EAED,OAAO;IAAEH,KAAK;IAAEY,WAAW;IAAEP,eAAe;IAAEW,gBAAgB;IAAEG;EAAU,CAAC;AAC7E,CAAC;AAACpB,EAAA,CAtDID,YAAY;AAwDlB,eAAeA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}