{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport io from 'socket.io-client';\nconst socket = io('http://localhost:3000');\nconst initialBoard = () => Array(9).fill(null);\nconst useTictacToe = () => {\n  _s();\n  const [board, setBoard] = useState(initialBoard());\n  const [isXNext, setIsXNext] = useState(true);\n  const [currentPlayer, setCurrentPlayer] = useState(null);\n  const [myPlayer, setMyPlayer] = useState(null);\n  useEffect(() => {\n    console.log('Connecting to Socket.io server...');\n    socket.on('gameState', data => {\n      console.log('Received game state from server:', data);\n      setBoard(data.board);\n      setIsXNext(data.isXNext);\n      setCurrentPlayer(data.currentPlayer);\n      if (!myPlayer && data.board.every(cell => cell === null)) {\n        setMyPlayer(data.isXNext ? 'X' : 'O');\n      }\n    });\n    return () => {\n      console.log('Disconnecting from Socket.io server...');\n      socket.off('gameState');\n    };\n  }, []);\n  const WINNING_PATTERNS = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  const calculateWinner = currentBoard => {\n    for (let i = 0; i < WINNING_PATTERNS.length; i++) {\n      const [a, b, c] = WINNING_PATTERNS[i];\n      if (currentBoard[a] && currentBoard[a] === currentBoard[b] && currentBoard[a] === currentBoard[c]) {\n        return currentBoard[a];\n      }\n    }\n    return null;\n  };\n  const handleClick = index => {\n    // check winner\n    const winner = calculateWinner(board);\n    if (winner || board[index] || myPlayer === 'X' && !isXNext || myPlayer === 'O' && isXNext) return;\n    const gameState = {\n      index\n    };\n    console.log('Sending game state to server:', gameState);\n    socket.emit('move', gameState);\n  };\n  const getStatusMessage = () => {\n    const winner = calculateWinner(board);\n    if (winner) return \"Player \".concat(winner, \" wins!\");\n    if (!board.includes(null)) return \"It's a draw!\";\n    return \"Player \".concat(isXNext ? \"X\" : \"O\", \" turn\");\n  };\n  const resetGame = () => {\n    setBoard(initialBoard());\n    setIsXNext(true);\n  };\n  return {\n    board,\n    handleClick,\n    calculateWinner,\n    getStatusMessage,\n    resetGame\n  };\n};\n_s(useTictacToe, \"XazDw7LPAtzqdsCJYD8iMbdcGho=\");\nexport default useTictacToe;","map":{"version":3,"names":["useState","useEffect","io","socket","initialBoard","Array","fill","useTictacToe","_s","board","setBoard","isXNext","setIsXNext","currentPlayer","setCurrentPlayer","myPlayer","setMyPlayer","console","log","on","data","every","cell","off","WINNING_PATTERNS","calculateWinner","currentBoard","i","length","a","b","c","handleClick","index","winner","gameState","emit","getStatusMessage","concat","includes","resetGame"],"sources":["E:/WebDev/FrontEnd/React/client/src/hooks/use-tic-tac-toe.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport io from 'socket.io-client';\r\n\r\nconst socket = io('http://localhost:3000');\r\n\r\nconst initialBoard = () => Array(9).fill(null);\r\n\r\nconst useTictacToe = () => {\r\n  const [board, setBoard] = useState(initialBoard());\r\n  const [isXNext, setIsXNext] = useState(true);\r\n  const [currentPlayer, setCurrentPlayer] = useState(null);\r\n  const [myPlayer, setMyPlayer] = useState(null);\r\n\r\n  useEffect(() => {\r\n    console.log('Connecting to Socket.io server...');\r\n    socket.on('gameState', (data) => {\r\n      console.log('Received game state from server:', data);\r\n      setBoard(data.board);\r\n      setIsXNext(data.isXNext);\r\n      setCurrentPlayer(data.currentPlayer);\r\n      if (!myPlayer && data.board.every(cell => cell === null)) {\r\n      setMyPlayer(data.isXNext ? 'X' : 'O');\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      console.log('Disconnecting from Socket.io server...');\r\n      socket.off('gameState');\r\n    };\r\n  }, []);\r\n\r\n  const WINNING_PATTERNS = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n\r\n  const calculateWinner = (currentBoard) => {\r\n    for (let i = 0; i < WINNING_PATTERNS.length; i++) {\r\n      const [a, b, c] = WINNING_PATTERNS[i];\r\n      if (\r\n        currentBoard[a] &&\r\n        currentBoard[a] === currentBoard[b] &&\r\n        currentBoard[a] === currentBoard[c]\r\n      ) {\r\n        return currentBoard[a];\r\n      }\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  const handleClick = (index) => {\r\n    // check winner\r\n    const winner = calculateWinner(board);\r\n  if (winner || board[index] || (myPlayer === 'X' && !isXNext) || (myPlayer === 'O' && isXNext)) return;\r\n\r\n  const gameState = { index };\r\n    console.log('Sending game state to server:', gameState);\r\n    socket.emit('move', gameState);\r\n  };\r\n\r\n  const getStatusMessage = () => {\r\n    const winner = calculateWinner(board);\r\n    if (winner) return `Player ${winner} wins!`;\r\n    if (!board.includes(null)) return `It's a draw!`;\r\n    return `Player ${isXNext ? \"X\" : \"O\"} turn`;\r\n  };\r\n\r\n  const resetGame = () => {\r\n    setBoard(initialBoard());\r\n    setIsXNext(true);\r\n  };\r\n\r\n  return { board, handleClick, calculateWinner, getStatusMessage, resetGame };\r\n};\r\n\r\nexport default useTictacToe;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}